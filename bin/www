#!/usr/bin/env node

/**
 * Module dependencies.
 */
const debug = require("debug")("full-stack-example:server");
const http = require("http");
const https = require("https");
const fs = require("fs");
const app = require("../app");
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3005");
app.set("port", port);
app.set("secPort", port + 438);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

const options = {
  key: fs.readFileSync(`${__dirname}/private.key`),
  cert: fs.readFileSync(`${__dirname}/certificate.pem`),
};

const secureServer = https.createServer(options, app);
// launch backend into a port
secureServer.listen(app.get("secPort"), () => {
  // here
  console.log(`Server listening on port ${app.get("secPort")}`); // here
});

secureServer.on("error", onError);
secureServer.on("listening", onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const inPort = parseInt(val, 10);

  if (Number.isNaN(inPort)) {
    // named pipe
    return val;
  }

  if (inPort >= 0) {
    // port number
    return inPort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
